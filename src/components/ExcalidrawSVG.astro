---
import type { ImageMetadata } from 'astro';

interface Props {
  src: ImageMetadata | string;
  alt: string;
  caption?: string;
}

const { src, alt, caption } = Astro.props;

const svgUrl = typeof src === 'string' ? src : src.src;
---

<figure class="w-full max-w-full overflow-hidden my-8">
  <div class="excalidraw-svg w-full max-w-full overflow-hidden" data-svg-url={svgUrl} aria-label={alt}>
    <img src={svgUrl} alt={alt} style="display: none;" />
  </div>
  {caption && <figcaption class="text-center mt-4 text-sm text-skin-base italic">{caption}</figcaption>}
</figure>

<script type="ts">
  function modifySvg(svgString: string): string {
    const parser = new DOMParser();
    const doc = parser.parseFromString(svgString, 'image/svg+xml');
    const svg = doc.documentElement;

    svg.setAttribute('width', '100%');
    svg.setAttribute('height', '100%');
    svg.classList.add('w-full', 'h-auto');

    doc.querySelectorAll('text').forEach(text => {
      text.removeAttribute('fill');
      text.classList.add('fill-skin-base');
    });

    doc.querySelectorAll('rect').forEach(rect => {
      rect.removeAttribute('fill');
      rect.classList.add('fill-skin-soft');
    });

    doc.querySelectorAll('path').forEach(path => {
      path.removeAttribute('stroke');
      path.classList.add('stroke-skin-accent');
    });

    doc.querySelectorAll('g').forEach(g => {
      g.classList.add('excalidraw-element');
    });

    return new XMLSerializer().serializeToString(doc);
  }

  function initExcalidrawSVG() {
    const svgContainers = document.querySelectorAll<HTMLElement>('.excalidraw-svg');
    svgContainers.forEach(async (container) => {
      const svgUrl = container.dataset.svgUrl;
      if (svgUrl) {
        try {
          const response = await fetch(svgUrl);
          if (!response.ok) {
            throw new Error(`Failed to fetch SVG: ${response.statusText}`);
          }
          const svgData = await response.text();
          const modifiedSvg = modifySvg(svgData);
          container.innerHTML = modifiedSvg;
        } catch (error) {
          console.error('Error in ExcalidrawSVG component:', error);
          container.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
            <text x="10" y="50" fill="red">Error loading SVG</text>
          </svg>`;
        }
      }
    });
  }

  document.addEventListener('DOMContentLoaded', initExcalidrawSVG);
  document.addEventListener('astro:page-load', initExcalidrawSVG);
</script>

<style>
  :global(.excalidraw-svg svg) {
    width: 100%;
    height: auto;
  }
  :global(.excalidraw-svg .fill-skin-base) {
    fill: rgb(34, 46, 54);
  }
  @media (prefers-color-scheme: dark) {
    :global(.excalidraw-svg .fill-skin-base) {
      fill: rgb(175, 176, 177);
    }
  }
  :global(.excalidraw-svg .fill-skin-soft) {
    fill: rgb(234, 206, 219);
  }
  @media (prefers-color-scheme: dark) {
    :global(.excalidraw-svg .fill-skin-soft) {
      fill: rgb(40, 39, 40);
    }
  }
  :global(.excalidraw-svg .stroke-skin-accent) {
    stroke: rgb(211, 0, 106);
  }
  @media (prefers-color-scheme: dark) {
    :global(.excalidraw-svg .stroke-skin-accent) {
      stroke: rgb(199, 54, 47);
    }
  }
  :global(.excalidraw-svg .excalidraw-element) {
    transition: all 0.3s ease-in-out;
  }
  :global(.excalidraw-svg .excalidraw-element:hover) {
    opacity: 0.8;
  }
</style>
